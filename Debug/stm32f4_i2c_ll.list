
stm32f4_i2c_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800258c  0800258c  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002594  08002594  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000621f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000010b1  00000000  00000000  00026253  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000868  00000000  00000000  00027308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007d0  00000000  00000000  00027b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00022d5d  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000053ca  00000000  00000000  0004b09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d3882  00000000  00000000  00050467  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00123ce9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000225c  00000000  00000000  00123d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800255c 	.word	0x0800255c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800255c 	.word	0x0800255c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	bf0c      	ite	eq
 80004dc:	2301      	moveq	r3, #1
 80004de:	2300      	movne	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	2b04      	cmp	r3, #4
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2db      	uxtb	r3, r3
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000524:	2b40      	cmp	r3, #64	; 0x40
 8000526:	bf0c      	ite	eq
 8000528:	2301      	moveq	r3, #1
 800052a:	2300      	movne	r3, #0
 800052c:	b2db      	uxtb	r3, r3
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b01      	cmp	r3, #1
 800054c:	bf0c      	ite	eq
 800054e:	2301      	moveq	r3, #1
 8000550:	2300      	movne	r3, #0
 8000552:	b2db      	uxtb	r3, r3
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f003 0302 	and.w	r3, r3, #2
 8000570:	2b02      	cmp	r3, #2
 8000572:	bf0c      	ite	eq
 8000574:	2301      	moveq	r3, #1
 8000576:	2300      	movne	r3, #0
 8000578:	b2db      	uxtb	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000594:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	b2db      	uxtb	r3, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	431a      	orrs	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <I2C_BMI160_ReceiveData>:
static int8_t BMI160_ReadRegister(uint8_t address, uint8_t dataSize, uint8_t *rec);
static uint8_t BMI160_ReadRegBits(uint8_t reg, unsigned pos, unsigned len);
static int8_t BMI160_WriteRegisterBits(uint8_t reg, uint8_t data, unsigned pos, unsigned len);

static int8_t I2C_BMI160_ReceiveData(uint8_t devAddr, uint8_t* buffer, uint8_t len, uint16_t maxDelay)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6039      	str	r1, [r7, #0]
 800065c:	4611      	mov	r1, r2
 800065e:	461a      	mov	r2, r3
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	460b      	mov	r3, r1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	4613      	mov	r3, r2
 800066a:	80bb      	strh	r3, [r7, #4]
  uint16_t countTimeout = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]

  if(len == 1) { LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK); }
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <I2C_BMI160_ReceiveData+0x2c>
 8000676:	2100      	movs	r1, #0
 8000678:	483a      	ldr	r0, [pc, #232]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 800067a:	f7ff ff96 	bl	80005aa <LL_I2C_AcknowledgeNextData>
 800067e:	e004      	b.n	800068a <I2C_BMI160_ReceiveData+0x36>
  else { LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK); }
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	4837      	ldr	r0, [pc, #220]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 8000686:	f7ff ff90 	bl	80005aa <LL_I2C_AcknowledgeNextData>

  LL_I2C_GenerateStartCondition(I2C1);
 800068a:	4836      	ldr	r0, [pc, #216]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 800068c:	f7ff ffa0 	bl	80005d0 <LL_I2C_GenerateStartCondition>

  while(!LL_I2C_IsActiveFlag_SB(I2C1)) {
 8000690:	e00c      	b.n	80006ac <I2C_BMI160_ReceiveData+0x58>
    LL_mDelay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 ff0a 	bl	80024ac <LL_mDelay>
    countTimeout++;
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	3301      	adds	r3, #1
 800069c:	81fb      	strh	r3, [r7, #14]
    if(countTimeout > maxDelay) {
 800069e:	89fa      	ldrh	r2, [r7, #14]
 80006a0:	88bb      	ldrh	r3, [r7, #4]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d902      	bls.n	80006ac <I2C_BMI160_ReceiveData+0x58>
    	return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e057      	b.n	800075c <I2C_BMI160_ReceiveData+0x108>
  while(!LL_I2C_IsActiveFlag_SB(I2C1)) {
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 80006ae:	f7ff ff44 	bl	800053a <LL_I2C_IsActiveFlag_SB>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0ec      	beq.n	8000692 <I2C_BMI160_ReceiveData+0x3e>
    }
  }

  LL_I2C_TransmitData8(I2C1, (devAddr) | 0x01);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	4828      	ldr	r0, [pc, #160]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 80006c4:	f7ff ffb1 	bl	800062a <LL_I2C_TransmitData8>

  while(!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 80006c8:	e00c      	b.n	80006e4 <I2C_BMI160_ReceiveData+0x90>
    LL_mDelay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 feee 	bl	80024ac <LL_mDelay>
    countTimeout++;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	81fb      	strh	r3, [r7, #14]
    if(countTimeout > maxDelay) {
 80006d6:	89fa      	ldrh	r2, [r7, #14]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d902      	bls.n	80006e4 <I2C_BMI160_ReceiveData+0x90>
    	return -2;
 80006de:	f06f 0301 	mvn.w	r3, #1
 80006e2:	e03b      	b.n	800075c <I2C_BMI160_ReceiveData+0x108>
  while(!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 80006e6:	f7ff ff3b 	bl	8000560 <LL_I2C_IsActiveFlag_ADDR>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0ec      	beq.n	80006ca <I2C_BMI160_ReceiveData+0x76>
    }
  }

  LL_I2C_ClearFlag_ADDR(I2C1);
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 80006f2:	f7ff ff48 	bl	8000586 <LL_I2C_ClearFlag_ADDR>

  for(int i = 0; i < len; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	e027      	b.n	800074c <I2C_BMI160_ReceiveData+0xf8>
    if(i == (len - 1)) {
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	3b01      	subs	r3, #1
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	429a      	cmp	r2, r3
 8000704:	d111      	bne.n	800072a <I2C_BMI160_ReceiveData+0xd6>
      LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 8000706:	2100      	movs	r1, #0
 8000708:	4816      	ldr	r0, [pc, #88]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 800070a:	f7ff ff4e 	bl	80005aa <LL_I2C_AcknowledgeNextData>
    }

    while(!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 800070e:	e00c      	b.n	800072a <I2C_BMI160_ReceiveData+0xd6>
      LL_mDelay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fecb 	bl	80024ac <LL_mDelay>
      countTimeout++;
 8000716:	89fb      	ldrh	r3, [r7, #14]
 8000718:	3301      	adds	r3, #1
 800071a:	81fb      	strh	r3, [r7, #14]
      if(countTimeout > maxDelay) {
 800071c:	89fa      	ldrh	r2, [r7, #14]
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d902      	bls.n	800072a <I2C_BMI160_ReceiveData+0xd6>
    	  return -3;
 8000724:	f06f 0302 	mvn.w	r3, #2
 8000728:	e018      	b.n	800075c <I2C_BMI160_ReceiveData+0x108>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 800072c:	f7ff fef2 	bl	8000514 <LL_I2C_IsActiveFlag_RXNE>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0ec      	beq.n	8000710 <I2C_BMI160_ReceiveData+0xbc>
      }
    }

    buffer[i] = LL_I2C_ReceiveData8(I2C1);
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	18d4      	adds	r4, r2, r3
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 800073e:	f7ff ff67 	bl	8000610 <LL_I2C_ReceiveData8>
 8000742:	4603      	mov	r3, r0
 8000744:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < len; i++) {
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	3301      	adds	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbd3      	blt.n	80006fc <I2C_BMI160_ReceiveData+0xa8>
  }

  LL_I2C_GenerateStopCondition(I2C1);
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <I2C_BMI160_ReceiveData+0x110>)
 8000756:	f7ff ff4b 	bl	80005f0 <LL_I2C_GenerateStopCondition>

  return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40005400 	.word	0x40005400

08000768 <I2C_BMI160_SendData>:

static int8_t I2C_BMI160_SendData(uint8_t devAddr, uint8_t* buffer, uint16_t len, uint16_t maxDelay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	4611      	mov	r1, r2
 8000772:	461a      	mov	r2, r3
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	460b      	mov	r3, r1
 800077a:	81bb      	strh	r3, [r7, #12]
 800077c:	4613      	mov	r3, r2
 800077e:	80fb      	strh	r3, [r7, #6]
  uint16_t countTimeout = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	82fb      	strh	r3, [r7, #22]

  LL_I2C_GenerateStartCondition(I2C1);
 8000784:	4839      	ldr	r0, [pc, #228]	; (800086c <I2C_BMI160_SendData+0x104>)
 8000786:	f7ff ff23 	bl	80005d0 <LL_I2C_GenerateStartCondition>

  while(!LL_I2C_IsActiveFlag_SB(I2C1)) {
 800078a:	e00c      	b.n	80007a6 <I2C_BMI160_SendData+0x3e>
    LL_mDelay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f001 fe8d 	bl	80024ac <LL_mDelay>
    countTimeout++;
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	3301      	adds	r3, #1
 8000796:	82fb      	strh	r3, [r7, #22]
    if(countTimeout > maxDelay) {
 8000798:	8afa      	ldrh	r2, [r7, #22]
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	429a      	cmp	r2, r3
 800079e:	d902      	bls.n	80007a6 <I2C_BMI160_SendData+0x3e>
    	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	e05e      	b.n	8000864 <I2C_BMI160_SendData+0xfc>
  while(!LL_I2C_IsActiveFlag_SB(I2C1)) {
 80007a6:	4831      	ldr	r0, [pc, #196]	; (800086c <I2C_BMI160_SendData+0x104>)
 80007a8:	f7ff fec7 	bl	800053a <LL_I2C_IsActiveFlag_SB>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0ec      	beq.n	800078c <I2C_BMI160_SendData+0x24>
    }
  }

  LL_I2C_TransmitData8(I2C1, (devAddr) | 0x00);
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4619      	mov	r1, r3
 80007b6:	482d      	ldr	r0, [pc, #180]	; (800086c <I2C_BMI160_SendData+0x104>)
 80007b8:	f7ff ff37 	bl	800062a <LL_I2C_TransmitData8>

  while(!LL_I2C_IsActiveFlag_ADDR(I2C1))
 80007bc:	e00c      	b.n	80007d8 <I2C_BMI160_SendData+0x70>
  {
    LL_mDelay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f001 fe74 	bl	80024ac <LL_mDelay>
    countTimeout++;
 80007c4:	8afb      	ldrh	r3, [r7, #22]
 80007c6:	3301      	adds	r3, #1
 80007c8:	82fb      	strh	r3, [r7, #22]
    if(countTimeout > maxDelay) {
 80007ca:	8afa      	ldrh	r2, [r7, #22]
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d902      	bls.n	80007d8 <I2C_BMI160_SendData+0x70>
    	return -2;
 80007d2:	f06f 0301 	mvn.w	r3, #1
 80007d6:	e045      	b.n	8000864 <I2C_BMI160_SendData+0xfc>
  while(!LL_I2C_IsActiveFlag_ADDR(I2C1))
 80007d8:	4824      	ldr	r0, [pc, #144]	; (800086c <I2C_BMI160_SendData+0x104>)
 80007da:	f7ff fec1 	bl	8000560 <LL_I2C_IsActiveFlag_ADDR>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0ec      	beq.n	80007be <I2C_BMI160_SendData+0x56>
    }
  }

  LL_I2C_ClearFlag_ADDR(I2C1);
 80007e4:	4821      	ldr	r0, [pc, #132]	; (800086c <I2C_BMI160_SendData+0x104>)
 80007e6:	f7ff fece 	bl	8000586 <LL_I2C_ClearFlag_ADDR>

  for(int i=0; i < len; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	e01d      	b.n	800082c <I2C_BMI160_SendData+0xc4>
  {
    while(!LL_I2C_IsActiveFlag_TXE(I2C1)) {
      LL_mDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fe5b 	bl	80024ac <LL_mDelay>
      countTimeout++;
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	3301      	adds	r3, #1
 80007fa:	82fb      	strh	r3, [r7, #22]
      if(countTimeout > maxDelay) {
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	429a      	cmp	r2, r3
 8000802:	d902      	bls.n	800080a <I2C_BMI160_SendData+0xa2>
    	  return -3;
 8000804:	f06f 0302 	mvn.w	r3, #2
 8000808:	e02c      	b.n	8000864 <I2C_BMI160_SendData+0xfc>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 800080a:	4818      	ldr	r0, [pc, #96]	; (800086c <I2C_BMI160_SendData+0x104>)
 800080c:	f7ff fe5c 	bl	80004c8 <LL_I2C_IsActiveFlag_TXE>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0ec      	beq.n	80007f0 <I2C_BMI160_SendData+0x88>
      }
    }

    LL_I2C_TransmitData8(I2C1, buffer[i]);
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <I2C_BMI160_SendData+0x104>)
 8000822:	f7ff ff02 	bl	800062a <LL_I2C_TransmitData8>
  for(int i=0; i < len; i++)
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	3301      	adds	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbea      	blt.n	800080a <I2C_BMI160_SendData+0xa2>
  }

  while(!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 8000834:	e00c      	b.n	8000850 <I2C_BMI160_SendData+0xe8>
    LL_mDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f001 fe38 	bl	80024ac <LL_mDelay>
    countTimeout++;
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	3301      	adds	r3, #1
 8000840:	82fb      	strh	r3, [r7, #22]
    if(countTimeout > maxDelay) {
 8000842:	8afa      	ldrh	r2, [r7, #22]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	429a      	cmp	r2, r3
 8000848:	d902      	bls.n	8000850 <I2C_BMI160_SendData+0xe8>
    	return -4;
 800084a:	f06f 0303 	mvn.w	r3, #3
 800084e:	e009      	b.n	8000864 <I2C_BMI160_SendData+0xfc>
  while(!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <I2C_BMI160_SendData+0x104>)
 8000852:	f7ff fe4c 	bl	80004ee <LL_I2C_IsActiveFlag_BTF>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0ec      	beq.n	8000836 <I2C_BMI160_SendData+0xce>
    }
  }

  LL_I2C_GenerateStopCondition(I2C1);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <I2C_BMI160_SendData+0x104>)
 800085e:	f7ff fec7 	bl	80005f0 <LL_I2C_GenerateStopCondition>

  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400

08000870 <BMI160_ReadRegister>:

static int8_t BMI160_ReadRegister(uint8_t address, uint8_t dataSize, uint8_t *rec)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	603a      	str	r2, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	460b      	mov	r3, r1
 800087e:	71bb      	strb	r3, [r7, #6]
	int8_t opResoult = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
	uint8_t data[1] = {0x00};
 8000884:	2300      	movs	r3, #0
 8000886:	733b      	strb	r3, [r7, #12]
	data[0] = address;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	733b      	strb	r3, [r7, #12]

	opResoult = I2C_BMI160_SendData(BMI160_I2C_ADDR, data, 1, 50);
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2332      	movs	r3, #50	; 0x32
 8000892:	2201      	movs	r2, #1
 8000894:	20d2      	movs	r0, #210	; 0xd2
 8000896:	f7ff ff67 	bl	8000768 <I2C_BMI160_SendData>
 800089a:	4603      	mov	r3, r0
 800089c:	73fb      	strb	r3, [r7, #15]
	if(opResoult != 0 ) { return (opResoult); }
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <BMI160_ReadRegister+0x3c>
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	e009      	b.n	80008c0 <BMI160_ReadRegister+0x50>
	opResoult = I2C_BMI160_ReceiveData(BMI160_I2C_ADDR + 1, &rec[0], dataSize, 50);
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	2332      	movs	r3, #50	; 0x32
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	20d3      	movs	r0, #211	; 0xd3
 80008b4:	f7ff fece 	bl	8000654 <I2C_BMI160_ReceiveData>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]

	return opResoult;
 80008bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <BMI160_WriteRegister>:

static int8_t BMI160_WriteRegister(uint8_t address, uint8_t cmd)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {0x00};
 80008d8:	2300      	movs	r3, #0
 80008da:	81bb      	strh	r3, [r7, #12]
	int8_t opResoult = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
	data[0] = address;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	733b      	strb	r3, [r7, #12]
	data[1] = cmd;
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	737b      	strb	r3, [r7, #13]

	opResoult = I2C_BMI160_SendData(BMI160_I2C_ADDR, data, 2, 50);
 80008e8:	f107 010c 	add.w	r1, r7, #12
 80008ec:	2332      	movs	r3, #50	; 0x32
 80008ee:	2202      	movs	r2, #2
 80008f0:	20d2      	movs	r0, #210	; 0xd2
 80008f2:	f7ff ff39 	bl	8000768 <I2C_BMI160_SendData>
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]

	return opResoult;
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <BMI160_ReadRegBits>:

static uint8_t BMI160_ReadRegBits(uint8_t reg, unsigned pos, unsigned len)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
	uint8_t readData = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	757b      	strb	r3, [r7, #21]
	int8_t opStatus = BMI160_ReadRegister(reg, 1, &readData);
 8000918:	f107 0215 	add.w	r2, r7, #21
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2101      	movs	r1, #1
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffa5 	bl	8000870 <BMI160_ReadRegister>
 8000926:	4603      	mov	r3, r0
 8000928:	75fb      	strb	r3, [r7, #23]

	if(opStatus != 0) {
 800092a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <BMI160_ReadRegBits+0x30>
		return 0x00;
 8000932:	2300      	movs	r3, #0
 8000934:	e013      	b.n	800095e <BMI160_ReadRegBits+0x58>
	}

    uint8_t mask = (1 << len) - 1;
 8000936:	2201      	movs	r2, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b01      	subs	r3, #1
 8000942:	75bb      	strb	r3, [r7, #22]
    readData >>= pos;
 8000944:	7d7b      	ldrb	r3, [r7, #21]
 8000946:	461a      	mov	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	fa42 f303 	asr.w	r3, r2, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	757b      	strb	r3, [r7, #21]
    readData &= mask;
 8000952:	7d7a      	ldrb	r2, [r7, #21]
 8000954:	7dbb      	ldrb	r3, [r7, #22]
 8000956:	4013      	ands	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	757b      	strb	r3, [r7, #21]

    return readData;
 800095c:	7d7b      	ldrb	r3, [r7, #21]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <BMI160_WriteRegisterBits>:

static int8_t BMI160_WriteRegisterBits(uint8_t reg, uint8_t data, unsigned pos, unsigned len)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	460b      	mov	r3, r1
 8000976:	73bb      	strb	r3, [r7, #14]
	uint8_t readData = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	757b      	strb	r3, [r7, #21]
	int8_t opStatus = BMI160_ReadRegister(reg, 1, &readData);
 800097c:	f107 0215 	add.w	r2, r7, #21
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff73 	bl	8000870 <BMI160_ReadRegister>
 800098a:	4603      	mov	r3, r0
 800098c:	75fb      	strb	r3, [r7, #23]

	if(opStatus != 0) {
 800098e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <BMI160_WriteRegisterBits+0x36>
		return opStatus;
 8000996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800099a:	e027      	b.n	80009ec <BMI160_WriteRegisterBits+0x86>
	}

    uint8_t mask = ((1 << len) - 1) << pos;
 800099c:	2201      	movs	r2, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	75bb      	strb	r3, [r7, #22]

    data <<= pos;
 80009ae:	7bba      	ldrb	r2, [r7, #14]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	73bb      	strb	r3, [r7, #14]
    data &= mask;
 80009b8:	7bba      	ldrb	r2, [r7, #14]
 80009ba:	7dbb      	ldrb	r3, [r7, #22]
 80009bc:	4013      	ands	r3, r2
 80009be:	73bb      	strb	r3, [r7, #14]
    readData &= ~(mask);
 80009c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	b25a      	sxtb	r2, r3
 80009c8:	7d7b      	ldrb	r3, [r7, #21]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	757b      	strb	r3, [r7, #21]
    readData |= data;
 80009d4:	7d7a      	ldrb	r2, [r7, #21]
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	757b      	strb	r3, [r7, #21]

    return BMI160_WriteRegister(reg, readData);
 80009de:	7d7a      	ldrb	r2, [r7, #21]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff6f 	bl	80008c8 <BMI160_WriteRegister>
 80009ea:	4603      	mov	r3, r0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <BMI160_Initialize>:



int8_t BMI160_Initialize(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	int8_t opStatus = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]

	opStatus = BMI160_PerformSoftReset();
 80009fe:	f000 f8ca 	bl	8000b96 <BMI160_PerformSoftReset>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -1; }
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <BMI160_Initialize+0x20>
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e078      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f001 fd49 	bl	80024ac <LL_mDelay>

	if(BMI160_CheckSensorID() == 0) { return -2; }
 8000a1a:	f000 f897 	bl	8000b4c <BMI160_CheckSensorID>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <BMI160_Initialize+0x36>
 8000a24:	f06f 0301 	mvn.w	r3, #1
 8000a28:	e06d      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f001 fd3e 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_PowerUpAccelerometer();
 8000a30:	f000 f8c0 	bl	8000bb4 <BMI160_PowerUpAccelerometer>
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -3; }
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <BMI160_Initialize+0x52>
 8000a40:	f06f 0302 	mvn.w	r3, #2
 8000a44:	e05f      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f001 fd30 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_PowerUpGyroscope();
 8000a4c:	f000 f8d6 	bl	8000bfc <BMI160_PowerUpGyroscope>
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -4; }
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <BMI160_Initialize+0x6e>
 8000a5c:	f06f 0303 	mvn.w	r3, #3
 8000a60:	e051      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f001 fd22 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_SetFullScaleGyroRange(BMI160_GYRO_RANGE_250);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 fa1a 	bl	8000ea2 <BMI160_SetFullScaleGyroRange>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -5; }
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <BMI160_Initialize+0x8c>
 8000a7a:	f06f 0304 	mvn.w	r3, #4
 8000a7e:	e042      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f001 fd13 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_SetFullScaleAccelRange(BMI160_ACCEL_RANGE_2G);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 fa1b 	bl	8000ec2 <BMI160_SetFullScaleAccelRange>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -6; }
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <BMI160_Initialize+0xaa>
 8000a98:	f06f 0305 	mvn.w	r3, #5
 8000a9c:	e033      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f001 fd04 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_WriteRegister(BMI160_RA_INT_MAP_0, 0xFF);
 8000aa4:	21ff      	movs	r1, #255	; 0xff
 8000aa6:	2055      	movs	r0, #85	; 0x55
 8000aa8:	f7ff ff0e 	bl	80008c8 <BMI160_WriteRegister>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -7; }
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <BMI160_Initialize+0xca>
 8000ab8:	f06f 0306 	mvn.w	r3, #6
 8000abc:	e023      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	f001 fcf4 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_WriteRegister(BMI160_RA_INT_MAP_1, 0xF0);
 8000ac4:	21f0      	movs	r1, #240	; 0xf0
 8000ac6:	2056      	movs	r0, #86	; 0x56
 8000ac8:	f7ff fefe 	bl	80008c8 <BMI160_WriteRegister>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -8; }
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <BMI160_Initialize+0xea>
 8000ad8:	f06f 0307 	mvn.w	r3, #7
 8000adc:	e013      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f001 fce4 	bl	80024ac <LL_mDelay>

	opStatus = BMI160_WriteRegister(BMI160_RA_INT_MAP_2, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2057      	movs	r0, #87	; 0x57
 8000ae8:	f7ff feee 	bl	80008c8 <BMI160_WriteRegister>
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
	if(opStatus != 0) { return -9; }
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <BMI160_Initialize+0x10a>
 8000af8:	f06f 0308 	mvn.w	r3, #8
 8000afc:	e003      	b.n	8000b06 <BMI160_Initialize+0x112>

    LL_mDelay(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f001 fcd4 	bl	80024ac <LL_mDelay>

	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <BMI160_ReadChipID>:

int8_t BMI160_ReadChipID(uint8_t *chipId)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
	uint8_t readData = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73bb      	strb	r3, [r7, #14]
	int8_t opStatus = BMI160_ReadRegister(BMI160_RA_CHIP_ID, 1, &readData);
 8000b1a:	f107 030e 	add.w	r3, r7, #14
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2101      	movs	r1, #1
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fea4 	bl	8000870 <BMI160_ReadRegister>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]

	if(opStatus != 0)
 8000b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <BMI160_ReadChipID+0x2c>
	{
		return opStatus;
 8000b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b38:	e004      	b.n	8000b44 <BMI160_ReadChipID+0x36>
	}

	*(chipId + 0) = readData;
 8000b3a:	7bba      	ldrb	r2, [r7, #14]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	701a      	strb	r2, [r3, #0]

	return opStatus;
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <BMI160_CheckSensorID>:

uint8_t BMI160_CheckSensorID(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
	uint8_t readedChipId = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	71bb      	strb	r3, [r7, #6]
	int8_t opStat = BMI160_ReadChipID(&readedChipId);
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffd8 	bl	8000b0e <BMI160_ReadChipID>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]

	if(opStat != 0) { return 0; }
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <BMI160_CheckSensorID+0x22>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e00f      	b.n	8000b8e <BMI160_CheckSensorID+0x42>

	if(readedChipId == SENSOR_CHIP_ID_BMI160) {
 8000b6e:	79bb      	ldrb	r3, [r7, #6]
 8000b70:	2bd0      	cmp	r3, #208	; 0xd0
 8000b72:	d101      	bne.n	8000b78 <BMI160_CheckSensorID+0x2c>
		return 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e00a      	b.n	8000b8e <BMI160_CheckSensorID+0x42>
	}
	else if(readedChipId == SENSOR_CHIP_ID_BMI160_C2) {
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	2bd1      	cmp	r3, #209	; 0xd1
 8000b7c:	d101      	bne.n	8000b82 <BMI160_CheckSensorID+0x36>
		return 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e005      	b.n	8000b8e <BMI160_CheckSensorID+0x42>
	}
	else if(readedChipId == SENSOR_CHIP_ID_BMI160_C3) {
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	2bd3      	cmp	r3, #211	; 0xd3
 8000b86:	d101      	bne.n	8000b8c <BMI160_CheckSensorID+0x40>
		return 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <BMI160_CheckSensorID+0x42>
	}

	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <BMI160_PerformSoftReset>:

int8_t BMI160_PerformSoftReset(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
	int8_t opStatus = BMI160_WriteRegister(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET);
 8000b9c:	21b6      	movs	r1, #182	; 0xb6
 8000b9e:	207e      	movs	r0, #126	; 0x7e
 8000ba0:	f7ff fe92 	bl	80008c8 <BMI160_WriteRegister>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
	return opStatus;
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <BMI160_PowerUpAccelerometer>:

int8_t BMI160_PowerUpAccelerometer(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	int8_t opStatus = BMI160_WriteRegister(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
 8000bba:	2111      	movs	r1, #17
 8000bbc:	207e      	movs	r0, #126	; 0x7e
 8000bbe:	f7ff fe83 	bl	80008c8 <BMI160_WriteRegister>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]

	if(opStatus != 0) {
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <BMI160_PowerUpAccelerometer+0x20>
		return opStatus;
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	e00f      	b.n	8000bf4 <BMI160_PowerUpAccelerometer+0x40>
	}

	LL_mDelay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f001 fc69 	bl	80024ac <LL_mDelay>

	while(0x1 != BMI160_ReadRegBits(BMI160_RA_PMU_STATUS, BMI160_ACC_PMU_STATUS_BIT, BMI160_ACC_PMU_STATUS_LEN)) {
 8000bda:	e002      	b.n	8000be2 <BMI160_PowerUpAccelerometer+0x2e>
		LL_mDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f001 fc65 	bl	80024ac <LL_mDelay>
	while(0x1 != BMI160_ReadRegBits(BMI160_RA_PMU_STATUS, BMI160_ACC_PMU_STATUS_BIT, BMI160_ACC_PMU_STATUS_LEN)) {
 8000be2:	2202      	movs	r2, #2
 8000be4:	2104      	movs	r1, #4
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff fe8d 	bl	8000906 <BMI160_ReadRegBits>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d1f4      	bne.n	8000bdc <BMI160_PowerUpAccelerometer+0x28>
	}

	return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <BMI160_PowerUpGyroscope>:

int8_t BMI160_PowerUpGyroscope(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	int8_t opStatus = BMI160_WriteRegister(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
 8000c02:	2115      	movs	r1, #21
 8000c04:	207e      	movs	r0, #126	; 0x7e
 8000c06:	f7ff fe5f 	bl	80008c8 <BMI160_WriteRegister>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]

	if(opStatus != 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <BMI160_PowerUpGyroscope+0x20>
	{
		return opStatus;
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	e00f      	b.n	8000c3c <BMI160_PowerUpGyroscope+0x40>
	}

	LL_mDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 fc45 	bl	80024ac <LL_mDelay>

	while(0x1 != BMI160_ReadRegBits(BMI160_RA_PMU_STATUS, BMI160_GYR_PMU_STATUS_BIT, BMI160_GYR_PMU_STATUS_LEN))
 8000c22:	e002      	b.n	8000c2a <BMI160_PowerUpGyroscope+0x2e>
	{
		LL_mDelay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f001 fc41 	bl	80024ac <LL_mDelay>
	while(0x1 != BMI160_ReadRegBits(BMI160_RA_PMU_STATUS, BMI160_GYR_PMU_STATUS_BIT, BMI160_GYR_PMU_STATUS_LEN))
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f7ff fe69 	bl	8000906 <BMI160_ReadRegBits>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d1f4      	bne.n	8000c24 <BMI160_PowerUpGyroscope+0x28>
	}

	return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <BMI160_ReadGyro>:

int8_t BMI160_ReadGyro(int16_t* x, int16_t* y, int16_t* z)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];

    buffer[0] = BMI160_RA_GYRO_X_L;
 8000c50:	230c      	movs	r3, #12
 8000c52:	743b      	strb	r3, [r7, #16]

    int8_t opStat = BMI160_ReadRegister(BMI160_RA_GYRO_X_L, 6, &buffer[0]);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2106      	movs	r1, #6
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f7ff fe07 	bl	8000870 <BMI160_ReadRegister>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]

    if(opStat != 0) { return opStat; }
 8000c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <BMI160_ReadGyro+0x30>
 8000c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c72:	e01c      	b.n	8000cae <BMI160_ReadGyro+0x6a>

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 8000c74:	7c7b      	ldrb	r3, [r7, #17]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	7c3b      	ldrb	r3, [r7, #16]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 8000c86:	7cfb      	ldrb	r3, [r7, #19]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	7cbb      	ldrb	r3, [r7, #18]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 8000c98:	7d7b      	ldrb	r3, [r7, #21]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	7d3b      	ldrb	r3, [r7, #20]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	801a      	strh	r2, [r3, #0]

    return opStat;
 8000caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <BMI160_GetTemperature>:
  }

  return g;
}

int8_t BMI160_GetTemperature(int16_t *temp) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2] = {0x00};
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	81bb      	strh	r3, [r7, #12]

    int8_t opStat = BMI160_ReadRegister(BMI160_RA_TEMP_L, 2, &buffer[0]);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2102      	movs	r1, #2
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f7ff fdd0 	bl	8000870 <BMI160_ReadRegister>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]

    if(opStat != 0) { return opStat; }
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <BMI160_GetTemperature+0x2c>
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	e00a      	b.n	8000cf8 <BMI160_GetTemperature+0x42>

    *(temp + 0) = (((int16_t)buffer[1]) << 8) | buffer[0];
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	7b3b      	ldrb	r3, [r7, #12]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	801a      	strh	r2, [r3, #0]
    return opStat;
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <BMI160_ConvertRawTemp>:

float BMI160_ConvertRawTemp(int16_t tempRaw)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
	float convertTemp = 0;
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]

    if(tempRaw & 0x8000) { convertTemp = (23.0F - ((0x10000 - tempRaw)/512.0F)); }
 8000d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da12      	bge.n	8000d3e <BMI160_ConvertRawTemp+0x3e>
 8000d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d28:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000d74 <BMI160_ConvertRawTemp+0x74>
 8000d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d30:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8000d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d38:	edc7 7a03 	vstr	s15, [r7, #12]
 8000d3c:	e00f      	b.n	8000d5e <BMI160_ConvertRawTemp+0x5e>
    else { convertTemp = ((tempRaw/512.0F) + 23.0F); }
 8000d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000d74 <BMI160_ConvertRawTemp+0x74>
 8000d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d52:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8000d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d5a:	edc7 7a03 	vstr	s15, [r7, #12]

    return convertTemp;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	ee07 3a90 	vmov	s15, r3
}
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	44000000 	.word	0x44000000

08000d78 <BMI160_GetAcceleration>:

    *(accel + 0) = (((int16_t)buffer[1]) << 8) | buffer[0];
    return opStat;
}

int8_t BMI160_GetAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6] = {0x00};
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	809a      	strh	r2, [r3, #4]

    int8_t opStat = BMI160_ReadRegister(BMI160_RA_ACCEL_X_L, 6, &buffer[0]);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	461a      	mov	r2, r3
 8000d94:	2106      	movs	r1, #6
 8000d96:	2012      	movs	r0, #18
 8000d98:	f7ff fd6a 	bl	8000870 <BMI160_ReadRegister>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	75fb      	strb	r3, [r7, #23]

    if(opStat != 0) { return opStat; }
 8000da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <BMI160_GetAcceleration+0x36>
 8000da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dac:	e01c      	b.n	8000de8 <BMI160_GetAcceleration+0x70>

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 8000dae:	7c7b      	ldrb	r3, [r7, #17]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	7c3b      	ldrb	r3, [r7, #16]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	7cbb      	ldrb	r3, [r7, #18]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	801a      	strh	r2, [r3, #0]

    return opStat;
 8000de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <BMI160_GetMotion6>:

int8_t BMI160_GetMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
    uint8_t buffer[12] = {0x00};
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]

    int8_t opStat = BMI160_ReadRegister(BMI160_RA_GYRO_X_L, 12, &buffer[0]);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	461a      	mov	r2, r3
 8000e10:	210c      	movs	r1, #12
 8000e12:	200c      	movs	r0, #12
 8000e14:	f7ff fd2c 	bl	8000870 <BMI160_ReadRegister>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	77fb      	strb	r3, [r7, #31]

    if(opStat != 0) { return opStat; }
 8000e1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <BMI160_GetMotion6+0x3a>
 8000e24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e28:	e037      	b.n	8000e9a <BMI160_GetMotion6+0xaa>

    *gx = (((int16_t)buffer[1])  << 8) | buffer[0];
 8000e2a:	7c7b      	ldrb	r3, [r7, #17]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7c3b      	ldrb	r3, [r7, #16]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	801a      	strh	r2, [r3, #0]
    *gy = (((int16_t)buffer[3])  << 8) | buffer[2];
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	7cbb      	ldrb	r3, [r7, #18]
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	801a      	strh	r2, [r3, #0]
    *gz = (((int16_t)buffer[5])  << 8) | buffer[4];
 8000e4e:	7d7b      	ldrb	r3, [r7, #21]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	7d3b      	ldrb	r3, [r7, #20]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5e:	801a      	strh	r2, [r3, #0]
    *ax = (((int16_t)buffer[7])  << 8) | buffer[6];
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	801a      	strh	r2, [r3, #0]
    *ay = (((int16_t)buffer[9])  << 8) | buffer[8];
 8000e72:	7e7b      	ldrb	r3, [r7, #25]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	7e3b      	ldrb	r3, [r7, #24]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	801a      	strh	r2, [r3, #0]
    *az = (((int16_t)buffer[11]) << 8) | buffer[10];
 8000e84:	7efb      	ldrb	r3, [r7, #27]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	7ebb      	ldrb	r3, [r7, #26]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	801a      	strh	r2, [r3, #0]

    return opStat;
 8000e96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <BMI160_SetFullScaleGyroRange>:

BMI160GyroRange BMI160_GetFullScaleGyroRange(void) {
	return (BMI160GyroRange)BMI160_ReadRegBits(BMI160_RA_GYRO_RANGE, BMI160_GYRO_RANGE_SEL_BIT, BMI160_GYRO_RANGE_SEL_LEN);
}

int8_t BMI160_SetFullScaleGyroRange(const BMI160GyroRange range) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
    return BMI160_WriteRegisterBits(BMI160_RA_GYRO_RANGE, (uint8_t)range, BMI160_GYRO_RANGE_SEL_BIT, BMI160_GYRO_RANGE_SEL_LEN);
 8000eac:	79f9      	ldrb	r1, [r7, #7]
 8000eae:	2303      	movs	r3, #3
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2043      	movs	r0, #67	; 0x43
 8000eb4:	f7ff fd57 	bl	8000966 <BMI160_WriteRegisterBits>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <BMI160_SetFullScaleAccelRange>:

BMI160AccelRange BMI160_GetFullScaleAccelRange(void) {
	return (BMI160AccelRange)BMI160_ReadRegBits(BMI160_RA_ACCEL_RANGE, BMI160_ACCEL_RANGE_SEL_BIT, BMI160_ACCEL_RANGE_SEL_LEN);
}

int8_t BMI160_SetFullScaleAccelRange(const BMI160AccelRange range) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	return BMI160_WriteRegisterBits(BMI160_RA_ACCEL_RANGE, (uint8_t)range, BMI160_ACCEL_RANGE_SEL_BIT, BMI160_ACCEL_RANGE_SEL_LEN);
 8000ecc:	79f9      	ldrb	r1, [r7, #7]
 8000ece:	2304      	movs	r3, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2041      	movs	r0, #65	; 0x41
 8000ed4:	f7ff fd47 	bl	8000966 <BMI160_WriteRegisterBits>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_I2C_EnableClockStretching>:
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_I2C_DisableGeneralCall>:
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_I2C_SetOwnAddress2>:
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_I2C_DisableOwnAddress2>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f023 0201 	bic.w	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <LL_RCC_HSE_Enable+0x1c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <LL_RCC_HSE_Enable+0x1c>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <LL_RCC_HSE_IsReady+0x24>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <LL_RCC_SetSysClkSource+0x24>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 0203 	bic.w	r2, r3, #3
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <LL_RCC_SetSysClkSource+0x24>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40023800 	.word	0x40023800

080010f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <LL_RCC_GetSysClkSource+0x18>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <LL_RCC_SetAHBPrescaler+0x24>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001124:	4904      	ldr	r1, [pc, #16]	; (8001138 <LL_RCC_SetAHBPrescaler+0x24>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800

0800113c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <LL_RCC_SetAPB1Prescaler+0x24>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40023800 	.word	0x40023800

08001164 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <LL_RCC_SetAPB2Prescaler+0x24>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001174:	4904      	ldr	r1, [pc, #16]	; (8001188 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40023800 	.word	0x40023800

0800118c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_RCC_PLL_Enable+0x1c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <LL_RCC_PLL_Enable+0x1c>)
 8001196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <LL_RCC_PLL_IsReady+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	4311      	orrs	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	0192      	lsls	r2, r2, #6
 80011f4:	430a      	orrs	r2, r1
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001204:	4904      	ldr	r1, [pc, #16]	; (8001218 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40023800 	.word	0x40023800
 800121c:	ffbf8000 	.word	0xffbf8000

08001220 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800

08001250 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <LL_APB1_GRP1_EnableClock+0x2c>)
 800125a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <LL_APB1_GRP1_EnableClock+0x2c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4313      	orrs	r3, r2
 8001262:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40023800 	.word	0x40023800

08001280 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800128a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40023800 	.word	0x40023800

080012b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <LL_FLASH_SetLatency+0x24>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 0207 	bic.w	r2, r3, #7
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <LL_FLASH_SetLatency+0x24>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <LL_FLASH_GetLatency+0x18>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40007000 	.word	0x40007000

0800131c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001386:	b590      	push	{r4, r7, lr}
 8001388:	b08d      	sub	sp, #52	; 0x34
 800138a:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800138c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001390:	f7ff ff76 	bl	8001280 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001394:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001398:	f7ff ff5a 	bl	8001250 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff fda1 	bl	8000ee4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80013a2:	f7ff fdc3 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2200      	movs	r2, #0
 80013aa:	210f      	movs	r1, #15
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fdf5 	bl	8000f9c <NVIC_EncodePriority>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	f7ff fdc5 	bl	8000f48 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f87b 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 f965 	bl	8001690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c6:	f000 f913 	bl	80015f0 <MX_USART2_UART_Init>
  //MX_WWDG_Init();
  MX_I2C1_Init();
 80013ca:	f000 f8b9 	bl	8001540 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int16_t tempVal = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	83bb      	strh	r3, [r7, #28]
  int8_t readGyroStat = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int8_t readTempValStat = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t getAccelerationStat = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t getMotion6Stat = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  float convertTemp = 0.0;
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  int16_t x = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	837b      	strh	r3, [r7, #26]
  int16_t y = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	833b      	strh	r3, [r7, #24]
  int16_t z = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	82fb      	strh	r3, [r7, #22]
  int16_t x1 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	82bb      	strh	r3, [r7, #20]
  int16_t y1 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	827b      	strh	r3, [r7, #18]
  int16_t z1 = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	823b      	strh	r3, [r7, #16]
  int16_t ax1 = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	81fb      	strh	r3, [r7, #14]
  int16_t ay1 = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	81bb      	strh	r3, [r7, #12]
  int16_t az1 = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	817b      	strh	r3, [r7, #10]
  int16_t gx1 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	813b      	strh	r3, [r7, #8]
  int16_t gy1 = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	80fb      	strh	r3, [r7, #6]
  int16_t gz1 = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	80bb      	strh	r3, [r7, #4]
  int8_t initOpStat = BMI160_Initialize();
 8001420:	f7ff fae8 	bl	80009f4 <BMI160_Initialize>
 8001424:	4603      	mov	r3, r0
 8001426:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  readGyroStat = BMI160_ReadGyro(&x, &y, &z);
 8001428:	f107 0216 	add.w	r2, r7, #22
 800142c:	f107 0118 	add.w	r1, r7, #24
 8001430:	f107 031a 	add.w	r3, r7, #26
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc05 	bl	8000c44 <BMI160_ReadGyro>
 800143a:	4603      	mov	r3, r0
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  LL_mDelay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f001 f833 	bl	80024ac <LL_mDelay>
	  readTempValStat = BMI160_GetTemperature(&tempVal);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc33 	bl	8000cb6 <BMI160_GetTemperature>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  convertTemp = BMI160_ConvertRawTemp(tempVal);
 8001456:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc50 	bl	8000d00 <BMI160_ConvertRawTemp>
 8001460:	ed87 0a08 	vstr	s0, [r7, #32]
	  LL_mDelay(100);
 8001464:	2064      	movs	r0, #100	; 0x64
 8001466:	f001 f821 	bl	80024ac <LL_mDelay>
	  getAccelerationStat = BMI160_GetAcceleration(&x1, &y1, &z1);
 800146a:	f107 0210 	add.w	r2, r7, #16
 800146e:	f107 0112 	add.w	r1, r7, #18
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc7e 	bl	8000d78 <BMI160_GetAcceleration>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  LL_mDelay(100);
 8001482:	2064      	movs	r0, #100	; 0x64
 8001484:	f001 f812 	bl	80024ac <LL_mDelay>
	  getMotion6Stat = BMI160_GetMotion6(&ax1, &ay1, &az1, &gx1, &gy1, &gz1);
 8001488:	f107 0408 	add.w	r4, r7, #8
 800148c:	f107 020a 	add.w	r2, r7, #10
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	f107 000e 	add.w	r0, r7, #14
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	1dbb      	adds	r3, r7, #6
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4623      	mov	r3, r4
 80014a2:	f7ff fca5 	bl	8000df0 <BMI160_GetMotion6>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  LL_mDelay(300);
 80014ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014b0:	f000 fffc 	bl	80024ac <LL_mDelay>
	  readGyroStat = BMI160_ReadGyro(&x, &y, &z);
 80014b4:	e7b8      	b.n	8001428 <main+0xa2>
	...

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80014bc:	2005      	movs	r0, #5
 80014be:	f7ff fef7 	bl	80012b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80014c2:	bf00      	nop
 80014c4:	f7ff ff08 	bl	80012d8 <LL_FLASH_GetLatency>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d1fa      	bne.n	80014c4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80014ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d2:	f7ff ff0f 	bl	80012f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80014d6:	f7ff fdd7 	bl	8001088 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80014da:	bf00      	nop
 80014dc:	f7ff fde4 	bl	80010a8 <LL_RCC_HSE_IsReady>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d1fa      	bne.n	80014dc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80014e6:	2300      	movs	r3, #0
 80014e8:	22a8      	movs	r2, #168	; 0xa8
 80014ea:	2104      	movs	r1, #4
 80014ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014f0:	f7ff fe70 	bl	80011d4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80014f4:	f7ff fe4a 	bl	800118c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80014f8:	bf00      	nop
 80014fa:	f7ff fe57 	bl	80011ac <LL_RCC_PLL_IsReady>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1fa      	bne.n	80014fa <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fe05 	bl	8001114 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800150a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800150e:	f7ff fe15 	bl	800113c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001512:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001516:	f7ff fe25 	bl	8001164 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff fdd8 	bl	80010d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001520:	bf00      	nop
 8001522:	f7ff fde9 	bl	80010f8 <LL_RCC_GetSysClkSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b08      	cmp	r3, #8
 800152a:	d1fa      	bne.n	8001522 <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <SystemClock_Config+0x84>)
 800152e:	f000 ffaf 	bl	8002490 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001532:	4802      	ldr	r0, [pc, #8]	; (800153c <SystemClock_Config+0x84>)
 8001534:	f000 ffde 	bl	80024f4 <LL_SetSystemCoreClock>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0a037a00 	.word	0x0a037a00

08001540 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001568:	2002      	movs	r0, #2
 800156a:	f7ff fe59 	bl	8001220 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001572:	2302      	movs	r3, #2
 8001574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800157a:	2301      	movs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001582:	2304      	movs	r3, #4
 8001584:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_I2C1_Init+0xa4>)
 800158c:	f000 fa32 	bl	80019f4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001590:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001594:	f7ff fe5c 	bl	8001250 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <MX_I2C1_Init+0xa8>)
 800159a:	f7ff fd65 	bl	8001068 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MX_I2C1_Init+0xa8>)
 80015a0:	f7ff fd3f 	bl	8001022 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <MX_I2C1_Init+0xa8>)
 80015a6:	f7ff fd2c 	bl	8001002 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C1_Init+0xac>)
 80015b0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 230;
 80015b6:	23e6      	movs	r3, #230	; 0xe6
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015c6:	f107 0318 	add.w	r3, r7, #24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_I2C1_Init+0xa8>)
 80015ce:	f000 fb79 	bl	8001cc4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_I2C1_Init+0xa8>)
 80015d6:	f7ff fd34 	bl	8001042 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3730      	adds	r7, #48	; 0x30
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40005400 	.word	0x40005400
 80015ec:	000186a0 	.word	0x000186a0

080015f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800161a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800161e:	f7ff fe17 	bl	8001250 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fdfc 	bl	8001220 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001628:	230c      	movs	r3, #12
 800162a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800163c:	2307      	movs	r3, #7
 800163e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <MX_USART2_UART_Init+0x98>)
 8001646:	f000 f9d5 	bl	80019f4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800164a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800164e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800165c:	230c      	movs	r3, #12
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_USART2_UART_Init+0x9c>)
 8001670:	f000 fe74 	bl	800235c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x9c>)
 8001676:	f7ff fe61 	bl	800133c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800167a:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_USART2_UART_Init+0x9c>)
 800167c:	f7ff fe4e 	bl	800131c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40020000 	.word	0x40020000
 800168c:	40004400 	.word	0x40004400

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80016a6:	2080      	movs	r0, #128	; 0x80
 80016a8:	f7ff fdba 	bl	8001220 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fdb7 	bl	8001220 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80016b2:	2008      	movs	r0, #8
 80016b4:	f7ff fdb4 	bl	8001220 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016b8:	2002      	movs	r0, #2
 80016ba:	f7ff fdb1 	bl	8001220 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 80016be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_GPIO_Init+0x78>)
 80016c4:	f7ff fe50 	bl	8001368 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80016c8:	2301      	movs	r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_GPIO_Init+0x7c>)
 80016da:	f000 f98b 	bl	80019f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80016de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016e4:	2301      	movs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_GPIO_Init+0x78>)
 80016fa:	f000 f97b 	bl	80019f4 <LL_GPIO_Init>

}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40020000 	.word	0x40020000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END WWDG_IRQn 0 */
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179e:	490e      	ldr	r1, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b4:	4c0b      	ldr	r4, [pc, #44]	; (80017e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f000 fea5 	bl	8002514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fddc 	bl	8001386 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017dc:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80017e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017e4:	20000020 	.word	0x20000020

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>

080017ea <LL_GPIO_SetPinMode>:
{
 80017ea:	b480      	push	{r7}
 80017ec:	b089      	sub	sp, #36	; 0x24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2103      	movs	r1, #3
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	61bb      	str	r3, [r7, #24]
  return result;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_GPIO_SetPinOutputType>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_GPIO_SetPinSpeed>:
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	613b      	str	r3, [r7, #16]
  return result;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	61bb      	str	r3, [r7, #24]
  return result;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	609a      	str	r2, [r3, #8]
}
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_GPIO_SetPinPull>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	b089      	sub	sp, #36	; 0x24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	613b      	str	r3, [r7, #16]
  return result;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2103      	movs	r1, #3
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	61bb      	str	r3, [r7, #24]
  return result;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	431a      	orrs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3724      	adds	r7, #36	; 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_GPIO_SetAFPin_0_7>:
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a1a      	ldr	r2, [r3, #32]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	613b      	str	r3, [r7, #16]
  return result;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	210f      	movs	r1, #15
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	61bb      	str	r3, [r7, #24]
  return result;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	621a      	str	r2, [r3, #32]
}
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_GPIO_SetAFPin_8_15>:
{
 8001992:	b480      	push	{r7}
 8001994:	b089      	sub	sp, #36	; 0x24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	613b      	str	r3, [r7, #16]
  return result;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	210f      	movs	r1, #15
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	61bb      	str	r3, [r7, #24]
  return result;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	613b      	str	r3, [r7, #16]
  return result;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a1e:	e050      	b.n	8001ac2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d042      	beq.n	8001abc <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d003      	beq.n	8001a46 <LL_GPIO_Init+0x52>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d10d      	bne.n	8001a62 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff12 	bl	8001878 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fef3 	bl	8001848 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	461a      	mov	r2, r3
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff33 	bl	80018d6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11a      	bne.n	8001aae <LL_GPIO_Init+0xba>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	60bb      	str	r3, [r7, #8]
  return result;
 8001a84:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d807      	bhi.n	8001aa0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	461a      	mov	r2, r3
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff4b 	bl	8001934 <LL_GPIO_SetAFPin_0_7>
 8001a9e:	e006      	b.n	8001aae <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff72 	bl	8001992 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	69b9      	ldr	r1, [r7, #24]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fe97 	bl	80017ea <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1a7      	bne.n	8001a20 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LL_I2C_Enable>:
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_I2C_Disable>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0201 	bic.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_I2C_SetOwnAddress1>:
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	609a      	str	r2, [r3, #8]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <LL_I2C_ConfigSpeed>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4a41      	ldr	r2, [pc, #260]	; (8001c6c <LL_I2C_ConfigSpeed+0x120>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9b      	lsrs	r3, r3, #18
 8001b6c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4939      	ldr	r1, [pc, #228]	; (8001c70 <LL_I2C_ConfigSpeed+0x124>)
 8001b8a:	428b      	cmp	r3, r1
 8001b8c:	d802      	bhi.n	8001b94 <LL_I2C_ConfigSpeed+0x48>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e009      	b.n	8001ba8 <LL_I2C_ConfigSpeed+0x5c>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4935      	ldr	r1, [pc, #212]	; (8001c74 <LL_I2C_ConfigSpeed+0x128>)
 8001ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <LL_I2C_ConfigSpeed+0x124>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d939      	bls.n	8001c2a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d117      	bne.n	8001bec <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be4:	e01d      	b.n	8001c22 <LL_I2C_ConfigSpeed+0xd6>
 8001be6:	f248 0301 	movw	r3, #32769	; 0x8001
 8001bea:	e01a      	b.n	8001c22 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009a      	lsls	r2, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1c:	e001      	b.n	8001c22 <LL_I2C_ConfigSpeed+0xd6>
 8001c1e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e010      	b.n	8001c4c <LL_I2C_ConfigSpeed+0x100>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d905      	bls.n	8001c48 <LL_I2C_ConfigSpeed+0xfc>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	e000      	b.n	8001c4a <LL_I2C_ConfigSpeed+0xfe>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8001c54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	61da      	str	r2, [r3, #28]
}
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	431bde83 	.word	0x431bde83
 8001c70:	000186a0 	.word	0x000186a0
 8001c74:	10624dd3 	.word	0x10624dd3

08001c78 <LL_I2C_SetMode>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 021a 	bic.w	r2, r3, #26
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_I2C_AcknowledgeNextData>:
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff13 	bl	8001afa <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f895 	bl	8001e08 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff2f 	bl	8001b4c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff0e 	bl	8001b1a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffb7 	bl	8001c78 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fee5 	bl	8001ada <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffc1 	bl	8001c9e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <LL_RCC_GetSysClkSource>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <LL_RCC_GetSysClkSource+0x18>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <LL_RCC_GetAHBPrescaler>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <LL_RCC_GetAHBPrescaler+0x18>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <LL_RCC_GetAPB1Prescaler>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <LL_RCC_GetAPB2Prescaler>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <LL_RCC_PLL_GetMainSource+0x18>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <LL_RCC_PLL_GetN+0x18>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <LL_RCC_PLL_GetP+0x18>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <LL_RCC_PLL_GetDivider+0x18>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001e10:	f000 f820 	bl	8001e54 <RCC_GetSystemClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f83e 	bl	8001ea0 <RCC_GetHCLKClockFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f84c 	bl	8001ecc <RCC_GetPCLK1ClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f858 	bl	8001ef4 <RCC_GetPCLK2ClockFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60da      	str	r2, [r3, #12]
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e5e:	f7ff ff63 	bl	8001d28 <LL_RCC_GetSysClkSource>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d006      	beq.n	8001e76 <RCC_GetSystemClockFreq+0x22>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d007      	beq.n	8001e7c <RCC_GetSystemClockFreq+0x28>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <RCC_GetSystemClockFreq+0x44>)
 8001e72:	607b      	str	r3, [r7, #4]
      break;
 8001e74:	e00a      	b.n	8001e8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <RCC_GetSystemClockFreq+0x48>)
 8001e78:	607b      	str	r3, [r7, #4]
      break;
 8001e7a:	e007      	b.n	8001e8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001e7c:	2008      	movs	r0, #8
 8001e7e:	f000 f84d 	bl	8001f1c <RCC_PLL_GetFreqDomain_SYS>
 8001e82:	6078      	str	r0, [r7, #4]
      break;
 8001e84:	e002      	b.n	8001e8c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <RCC_GetSystemClockFreq+0x44>)
 8001e88:	607b      	str	r3, [r7, #4]
      break;
 8001e8a:	bf00      	nop
  }

  return frequency;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001ea8:	f7ff ff4c 	bl	8001d44 <LL_RCC_GetAHBPrescaler>
 8001eac:	4603      	mov	r3, r0
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <RCC_GetHCLKClockFreq+0x28>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	40d3      	lsrs	r3, r2
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	08002574 	.word	0x08002574

08001ecc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ed4:	f7ff ff44 	bl	8001d60 <LL_RCC_GetAPB1Prescaler>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	40d3      	lsrs	r3, r2
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08002584 	.word	0x08002584

08001ef4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001efc:	f7ff ff3e 	bl	8001d7c <LL_RCC_GetAPB2Prescaler>
 8001f00:	4603      	mov	r3, r0
 8001f02:	0b5b      	lsrs	r3, r3, #13
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <RCC_GetPCLK2ClockFreq+0x24>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	40d3      	lsrs	r3, r2
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	08002584 	.word	0x08002584

08001f1c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001f30:	f7ff ff32 	bl	8001d98 <LL_RCC_PLL_GetMainSource>
 8001f34:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f40:	d003      	beq.n	8001f4a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001f42:	e005      	b.n	8001f50 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001f46:	617b      	str	r3, [r7, #20]
      break;
 8001f48:	e005      	b.n	8001f56 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001f4c:	617b      	str	r3, [r7, #20]
      break;
 8001f4e:	e002      	b.n	8001f56 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001f52:	617b      	str	r3, [r7, #20]
      break;
 8001f54:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d113      	bne.n	8001f84 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001f5c:	f7ff ff46 	bl	8001dec <LL_RCC_PLL_GetDivider>
 8001f60:	4602      	mov	r2, r0
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fbb3 f4f2 	udiv	r4, r3, r2
 8001f68:	f7ff ff24 	bl	8001db4 <LL_RCC_PLL_GetN>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	fb03 f404 	mul.w	r4, r3, r4
 8001f72:	f7ff ff2d 	bl	8001dd0 <LL_RCC_PLL_GetP>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f82:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001f84:	693b      	ldr	r3, [r7, #16]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <LL_USART_IsEnabled>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_USART_SetStopBitsLength>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_USART_SetHWFlowCtrl>:
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	615a      	str	r2, [r3, #20]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_USART_SetBaudRate>:
{
 800200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002022:	f040 80c1 	bne.w	80021a8 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	461d      	mov	r5, r3
 800202a:	f04f 0600 	mov.w	r6, #0
 800202e:	46a8      	mov	r8, r5
 8002030:	46b1      	mov	r9, r6
 8002032:	eb18 0308 	adds.w	r3, r8, r8
 8002036:	eb49 0409 	adc.w	r4, r9, r9
 800203a:	4698      	mov	r8, r3
 800203c:	46a1      	mov	r9, r4
 800203e:	eb18 0805 	adds.w	r8, r8, r5
 8002042:	eb49 0906 	adc.w	r9, r9, r6
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002052:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002056:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800205a:	4688      	mov	r8, r1
 800205c:	4691      	mov	r9, r2
 800205e:	eb18 0005 	adds.w	r0, r8, r5
 8002062:	eb49 0106 	adc.w	r1, r9, r6
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	461d      	mov	r5, r3
 800206a:	f04f 0600 	mov.w	r6, #0
 800206e:	196b      	adds	r3, r5, r5
 8002070:	eb46 0406 	adc.w	r4, r6, r6
 8002074:	461a      	mov	r2, r3
 8002076:	4623      	mov	r3, r4
 8002078:	f7fe f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800207c:	4603      	mov	r3, r0
 800207e:	460c      	mov	r4, r1
 8002080:	461a      	mov	r2, r3
 8002082:	4bb5      	ldr	r3, [pc, #724]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 8002084:	fba3 2302 	umull	r2, r3, r3, r2
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b29b      	uxth	r3, r3
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	fa1f f883 	uxth.w	r8, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	461d      	mov	r5, r3
 8002096:	f04f 0600 	mov.w	r6, #0
 800209a:	46a9      	mov	r9, r5
 800209c:	46b2      	mov	sl, r6
 800209e:	eb19 0309 	adds.w	r3, r9, r9
 80020a2:	eb4a 040a 	adc.w	r4, sl, sl
 80020a6:	4699      	mov	r9, r3
 80020a8:	46a2      	mov	sl, r4
 80020aa:	eb19 0905 	adds.w	r9, r9, r5
 80020ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020c6:	4689      	mov	r9, r1
 80020c8:	4692      	mov	sl, r2
 80020ca:	eb19 0005 	adds.w	r0, r9, r5
 80020ce:	eb4a 0106 	adc.w	r1, sl, r6
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	461d      	mov	r5, r3
 80020d6:	f04f 0600 	mov.w	r6, #0
 80020da:	196b      	adds	r3, r5, r5
 80020dc:	eb46 0406 	adc.w	r4, r6, r6
 80020e0:	461a      	mov	r2, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7fe f870 	bl	80001c8 <__aeabi_uldivmod>
 80020e8:	4603      	mov	r3, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b9a      	ldr	r3, [pc, #616]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2164      	movs	r1, #100	; 0x64
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	3332      	adds	r3, #50	; 0x32
 8002102:	4a95      	ldr	r2, [pc, #596]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b29b      	uxth	r3, r3
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002114:	b29b      	uxth	r3, r3
 8002116:	4443      	add	r3, r8
 8002118:	fa1f f883 	uxth.w	r8, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	461d      	mov	r5, r3
 8002120:	f04f 0600 	mov.w	r6, #0
 8002124:	46a9      	mov	r9, r5
 8002126:	46b2      	mov	sl, r6
 8002128:	eb19 0309 	adds.w	r3, r9, r9
 800212c:	eb4a 040a 	adc.w	r4, sl, sl
 8002130:	4699      	mov	r9, r3
 8002132:	46a2      	mov	sl, r4
 8002134:	eb19 0905 	adds.w	r9, r9, r5
 8002138:	eb4a 0a06 	adc.w	sl, sl, r6
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800214c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002150:	4689      	mov	r9, r1
 8002152:	4692      	mov	sl, r2
 8002154:	eb19 0005 	adds.w	r0, r9, r5
 8002158:	eb4a 0106 	adc.w	r1, sl, r6
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	461d      	mov	r5, r3
 8002160:	f04f 0600 	mov.w	r6, #0
 8002164:	196b      	adds	r3, r5, r5
 8002166:	eb46 0406 	adc.w	r4, r6, r6
 800216a:	461a      	mov	r2, r3
 800216c:	4623      	mov	r3, r4
 800216e:	f7fe f82b 	bl	80001c8 <__aeabi_uldivmod>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	461a      	mov	r2, r3
 8002178:	4b77      	ldr	r3, [pc, #476]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 800217a:	fba3 1302 	umull	r1, r3, r3, r2
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2164      	movs	r1, #100	; 0x64
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	3332      	adds	r3, #50	; 0x32
 800218c:	4a72      	ldr	r2, [pc, #456]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	b29b      	uxth	r3, r3
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	b29b      	uxth	r3, r3
 800219c:	4443      	add	r3, r8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	609a      	str	r2, [r3, #8]
}
 80021a6:	e0d2      	b.n	800234e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	469a      	mov	sl, r3
 80021ac:	f04f 0b00 	mov.w	fp, #0
 80021b0:	46d0      	mov	r8, sl
 80021b2:	46d9      	mov	r9, fp
 80021b4:	eb18 0308 	adds.w	r3, r8, r8
 80021b8:	eb49 0409 	adc.w	r4, r9, r9
 80021bc:	4698      	mov	r8, r3
 80021be:	46a1      	mov	r9, r4
 80021c0:	eb18 080a 	adds.w	r8, r8, sl
 80021c4:	eb49 090b 	adc.w	r9, r9, fp
 80021c8:	f04f 0100 	mov.w	r1, #0
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021dc:	4688      	mov	r8, r1
 80021de:	4691      	mov	r9, r2
 80021e0:	eb1a 0508 	adds.w	r5, sl, r8
 80021e4:	eb4b 0609 	adc.w	r6, fp, r9
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	f04f 0400 	mov.w	r4, #0
 80021f8:	0094      	lsls	r4, r2, #2
 80021fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021fe:	008b      	lsls	r3, r1, #2
 8002200:	461a      	mov	r2, r3
 8002202:	4623      	mov	r3, r4
 8002204:	4628      	mov	r0, r5
 8002206:	4631      	mov	r1, r6
 8002208:	f7fd ffde 	bl	80001c8 <__aeabi_uldivmod>
 800220c:	4603      	mov	r3, r0
 800220e:	460c      	mov	r4, r1
 8002210:	461a      	mov	r2, r3
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 8002214:	fba3 2302 	umull	r2, r3, r3, r2
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b29b      	uxth	r3, r3
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	fa1f f883 	uxth.w	r8, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	469b      	mov	fp, r3
 8002226:	f04f 0c00 	mov.w	ip, #0
 800222a:	46d9      	mov	r9, fp
 800222c:	46e2      	mov	sl, ip
 800222e:	eb19 0309 	adds.w	r3, r9, r9
 8002232:	eb4a 040a 	adc.w	r4, sl, sl
 8002236:	4699      	mov	r9, r3
 8002238:	46a2      	mov	sl, r4
 800223a:	eb19 090b 	adds.w	r9, r9, fp
 800223e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800224e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002256:	4689      	mov	r9, r1
 8002258:	4692      	mov	sl, r2
 800225a:	eb1b 0509 	adds.w	r5, fp, r9
 800225e:	eb4c 060a 	adc.w	r6, ip, sl
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0094      	lsls	r4, r2, #2
 8002274:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	461a      	mov	r2, r3
 800227c:	4623      	mov	r3, r4
 800227e:	4628      	mov	r0, r5
 8002280:	4631      	mov	r1, r6
 8002282:	f7fd ffa1 	bl	80001c8 <__aeabi_uldivmod>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	461a      	mov	r2, r3
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 800228e:	fba3 1302 	umull	r1, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4443      	add	r3, r8
 80022b2:	fa1f f883 	uxth.w	r8, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	469b      	mov	fp, r3
 80022ba:	f04f 0c00 	mov.w	ip, #0
 80022be:	46d9      	mov	r9, fp
 80022c0:	46e2      	mov	sl, ip
 80022c2:	eb19 0309 	adds.w	r3, r9, r9
 80022c6:	eb4a 040a 	adc.w	r4, sl, sl
 80022ca:	4699      	mov	r9, r3
 80022cc:	46a2      	mov	sl, r4
 80022ce:	eb19 090b 	adds.w	r9, r9, fp
 80022d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ea:	4689      	mov	r9, r1
 80022ec:	4692      	mov	sl, r2
 80022ee:	eb1b 0509 	adds.w	r5, fp, r9
 80022f2:	eb4c 060a 	adc.w	r6, ip, sl
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	0094      	lsls	r4, r2, #2
 8002308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800230c:	008b      	lsls	r3, r1, #2
 800230e:	461a      	mov	r2, r3
 8002310:	4623      	mov	r3, r4
 8002312:	4628      	mov	r0, r5
 8002314:	4631      	mov	r1, r6
 8002316:	f7fd ff57 	bl	80001c8 <__aeabi_uldivmod>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	461a      	mov	r2, r3
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 8002322:	fba3 1302 	umull	r1, r3, r3, r2
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2164      	movs	r1, #100	; 0x64
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	3332      	adds	r3, #50	; 0x32
 8002334:	4a08      	ldr	r2, [pc, #32]	; (8002358 <LL_USART_SetBaudRate+0x34c>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b29b      	uxth	r3, r3
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	b29b      	uxth	r3, r3
 8002344:	4443      	add	r3, r8
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	609a      	str	r2, [r3, #8]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002358:	51eb851f 	.word	0x51eb851f

0800235c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fe12 	bl	8001f98 <LL_USART_IsEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d15e      	bne.n	8002438 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002382:	f023 030c 	bic.w	r3, r3, #12
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6851      	ldr	r1, [r2, #4]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	4311      	orrs	r1, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	6912      	ldr	r2, [r2, #16]
 8002394:	4311      	orrs	r1, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6992      	ldr	r2, [r2, #24]
 800239a:	430a      	orrs	r2, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fe09 	bl	8001fc0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fe16 	bl	8001fe6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fd22 	bl	8001e08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <LL_USART_Init+0xe8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d102      	bne.n	80023d2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	e021      	b.n	8002416 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <LL_USART_Init+0xec>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d102      	bne.n	80023e0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e01a      	b.n	8002416 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1a      	ldr	r2, [pc, #104]	; (800244c <LL_USART_Init+0xf0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e013      	b.n	8002416 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <LL_USART_Init+0xf4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d102      	bne.n	80023fc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e00c      	b.n	8002416 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <LL_USART_Init+0xf8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d102      	bne.n	800240a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e005      	b.n	8002416 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <LL_USART_Init+0xfc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69b9      	ldr	r1, [r7, #24]
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fdea 	bl	800200c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002438:	7ffb      	ldrb	r3, [r7, #31]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40011000 	.word	0x40011000
 8002448:	40004400 	.word	0x40004400
 800244c:	40004800 	.word	0x40004800
 8002450:	40011400 	.word	0x40011400
 8002454:	40004c00 	.word	0x40004c00
 8002458:	40005000 	.word	0x40005000

0800245c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <LL_InitTick+0x30>)
 8002470:	3b01      	subs	r3, #1
 8002472:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <LL_InitTick+0x30>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <LL_InitTick+0x30>)
 800247c:	2205      	movs	r2, #5
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e010 	.word	0xe000e010

08002490 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffdd 	bl	800245c <LL_InitTick>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <LL_mDelay+0x44>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80024ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d00c      	beq.n	80024de <LL_mDelay+0x32>
  {
    Delay++;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3301      	adds	r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80024ca:	e008      	b.n	80024de <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <LL_mDelay+0x44>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <LL_mDelay+0x32>
    {
      Delay--;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f3      	bne.n	80024cc <LL_mDelay+0x20>
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <LL_SetSystemCoreClock+0x1c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	4e0d      	ldr	r6, [pc, #52]	; (800254c <__libc_init_array+0x38>)
 8002518:	4c0d      	ldr	r4, [pc, #52]	; (8002550 <__libc_init_array+0x3c>)
 800251a:	1ba4      	subs	r4, r4, r6
 800251c:	10a4      	asrs	r4, r4, #2
 800251e:	2500      	movs	r5, #0
 8002520:	42a5      	cmp	r5, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	4e0b      	ldr	r6, [pc, #44]	; (8002554 <__libc_init_array+0x40>)
 8002526:	4c0c      	ldr	r4, [pc, #48]	; (8002558 <__libc_init_array+0x44>)
 8002528:	f000 f818 	bl	800255c <_init>
 800252c:	1ba4      	subs	r4, r4, r6
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	2500      	movs	r5, #0
 8002532:	42a5      	cmp	r5, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800253c:	4798      	blx	r3
 800253e:	3501      	adds	r5, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002546:	4798      	blx	r3
 8002548:	3501      	adds	r5, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	08002594 	.word	0x08002594
 8002550:	08002594 	.word	0x08002594
 8002554:	08002594 	.word	0x08002594
 8002558:	08002598 	.word	0x08002598

0800255c <_init>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr

08002568 <_fini>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr
